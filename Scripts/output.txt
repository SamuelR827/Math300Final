> # Load necessary libraries
> library(ggplot2)
> library(dplyr)
> library(readxl)
> 
> # Load the cleaned data
> data <- read.csv("filtered_data2.csv")
> 
> # Descriptive Statistics
> summary(data)
       id         neighbourhood       room_type             price    
 Min.   :  2595   Length:494         Length:494         Min.   : 20  
 1st Qu.: 68799   Class :character   Class :character   1st Qu.: 89  
 Median :218323   Mode  :character   Mode  :character   Median :125  
 Mean   :232586                                         Mean   :149  
 3rd Qu.:358510                                         3rd Qu.:190  
 Max.   :577324                                         Max.   :500  
 number_of_reviews reviews_per_month calculated_host_listings_count availability_365
 Min.   :  1.00    Min.   :0.010     Min.   : 1.000                 Min.   :  1.0   
 1st Qu.: 25.00    1st Qu.:0.310     1st Qu.: 1.000                 1st Qu.: 85.0   
 Median : 63.00    Median :0.720     Median : 1.000                 Median :227.5   
 Mean   : 95.25    Mean   :1.057     Mean   : 2.255                 Mean   :202.1   
 3rd Qu.:136.00    3rd Qu.:1.498     3rd Qu.: 2.000                 3rd Qu.:301.8   
 Max.   :467.00    Max.   :7.140     Max.   :28.000                 Max.   :365.0   
   row_number   
 Min.   : 14.0  
 1st Qu.:262.5  
 Median :506.5  
 Mean   :503.1  
 3rd Qu.:744.8  
 Max.   :998.0  
> 
> # Histogram of Prices
> p2 <- ggplot(data, aes(x = price)) +
+   geom_histogram(bins = 30, fill = "blue", color = "black") +
+   labs(title = "Histogram of Prices",
+        x = "Price",
+        y = "Count")
> p2
> ggsave("histogram_of_prices.png", plot = p2, width = 8, height = 6)
> 
> # ---- Function for Confidence Intervals and Hypothesis Testing ----
> display_conf_intervals <- function(model, model_name) {
+   cat("Confidence Intervals for", model_name, "Model:\n")
+   print(confint(model))
+   cat("\n")
+ }
> 
> perform_hypothesis_testing <- function(model, predictors) {
+   for (predictor in predictors) {
+     p_value <- summary(model)$coefficients[predictor, 4]
+     cat("P-value for", predictor, ": ", p_value, "\n")
+     if (p_value < 0.05) {
+       cat(predictor, "has a significant effect on Price (reject H0).\n")
+     } else {
+       cat(predictor, "does not have a significant effect on Price (fail to reject H0).\n")
+     }
+     cat("\n")
+   }
+ }
> 
> # ---- Regression Models, Visualizations, Residual Analysis, and Hypothesis Testing ----
> 
> # Boxplots for Price by Room Type
> # ---- Regression Model for Price by Room Type ----
> model_room_type <- lm(price ~ room_type, data = data)
> summary(model_room_type)

Call:
lm(formula = price ~ room_type, data = data)

Residuals:
    Min      1Q  Median      3Q     Max 
-138.40  -42.95  -12.95   27.05  311.61 

Coefficients:
                      Estimate Std. Error t value Pr(>|t|)    
(Intercept)            188.395      4.409  42.730   <2e-16 ***
room_typePrivate room  -95.445      6.898 -13.837   <2e-16 ***
room_typeShared room  -127.895     53.364  -2.397   0.0169 *  
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 75.21 on 491 degrees of freedom
Multiple R-squared:  0.2835,	Adjusted R-squared:  0.2805 
F-statistic: 97.12 on 2 and 491 DF,  p-value: < 2.2e-16

> 
> p1 <- ggplot(data, aes(x = room_type, y = price)) +
+   geom_boxplot(fill = "blue", color = "black") +
+   labs(title = "Price by Room Type",
+        x = "Room Type",
+        y = "Price")
> p1
> ggsave("boxplot_price_by_room_type.png", plot = p1, width = 8, height = 6)
> 
> # 1. Price vs Availability (availability_365)
> model_availability <- lm(price ~ availability_365, data = data)
> summary(model_availability)

Call:
lm(formula = price ~ availability_365, data = data)

Residuals:
    Min      1Q  Median      3Q     Max 
-128.62  -61.61  -22.15   41.90  353.86 

Coefficients:
                  Estimate Std. Error t value Pr(>|t|)    
(Intercept)      152.63957    8.00161  19.076   <2e-16 ***
availability_365  -0.01780    0.03431  -0.519    0.604    
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 88.74 on 492 degrees of freedom
Multiple R-squared:  0.0005466,	Adjusted R-squared:  -0.001485 
F-statistic: 0.2691 on 1 and 492 DF,  p-value: 0.6042

> 
> p3 <- ggplot(data, aes(x = availability_365, y = price)) +
+   geom_point(alpha = 0.5, color = "blue") +
+   geom_smooth(method = "lm", color = "red", linetype = "dashed") +
+   labs(title = "Price vs. Availability (availability_365)",
+        x = "Availability (days per year)",
+        y = "Price")
> p3
`geom_smooth()` using formula = 'y ~ x'
> ggsave("price_vs_availability.png", plot = p3, width = 8, height = 6)
`geom_smooth()` using formula = 'y ~ x'
> 
> # Residual Analysis for Availability
> p4 <- ggplot(data, aes(x = predict(model_availability), y = resid(model_availability))) +
+   geom_point(alpha = 0.5, color = "blue") +
+   geom_hline(yintercept = 0, color = "red", linetype = "dashed") +
+   labs(title = "Residuals vs Fitted (Availability)",
+        x = "Fitted Values",
+        y = "Residuals")
> p4
> ggsave("residuals_availability.png", plot = p4, width = 8, height = 6)
> 
> # Confidence Intervals and Hypothesis Testing
> display_conf_intervals(model_availability, "Availability")
Confidence Intervals for Availability Model:
                       2.5 %       97.5 %
(Intercept)      136.9180177 168.36111260
availability_365  -0.0851985   0.04960834

> perform_hypothesis_testing(model_availability, c("availability_365"))
P-value for availability_365 :  0.604187 
availability_365 does not have a significant effect on Price (fail to reject H0).

> 
> # 2. Price vs Number of Reviews
> model_reviews <- lm(price ~ number_of_reviews, data = data)
> summary(model_reviews)

Call:
lm(formula = price ~ number_of_reviews, data = data)

Residuals:
    Min      1Q  Median      3Q     Max 
-131.26  -61.85  -22.80   39.94  350.78 

Coefficients:
                   Estimate Std. Error t value Pr(>|t|)    
(Intercept)       162.86749    5.67616   28.69  < 2e-16 ***
number_of_reviews  -0.14515    0.04282   -3.39 0.000756 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 87.74 on 492 degrees of freedom
Multiple R-squared:  0.02282,	Adjusted R-squared:  0.02083 
F-statistic: 11.49 on 1 and 492 DF,  p-value: 0.000756

> 
> p5 <- ggplot(data, aes(x = number_of_reviews, y = price)) +
+   geom_point(alpha = 0.5, color = "blue") +
+   geom_smooth(method = "lm", color = "red", linetype = "dashed") +
+   labs(title = "Price vs. Number of Reviews",
+        x = "Number of Reviews",
+        y = "Price")
> p5
`geom_smooth()` using formula = 'y ~ x'
> ggsave("price_vs_number_of_reviews.png", plot = p5, width = 8, height = 6)
`geom_smooth()` using formula = 'y ~ x'
> 
> # Residual Analysis for Number of Reviews
> p6 <- ggplot(data, aes(x = predict(model_reviews), y = resid(model_reviews))) +
+   geom_point(alpha = 0.5, color = "blue") +
+   geom_hline(yintercept = 0, color = "red", linetype = "dashed") +
+   labs(title = "Residuals vs Fitted (Number of Reviews)",
+        x = "Fitted Values",
+        y = "Residuals")
> p6
> ggsave("residuals_number_of_reviews.png", plot = p6, width = 8, height = 6)
> 
> # 3. Price vs Reviews Per Month
> model_reviews_per_month <- lm(price ~ reviews_per_month, data = data)
> summary(model_reviews_per_month)

Call:
lm(formula = price ~ reviews_per_month, data = data)

Residuals:
    Min      1Q  Median      3Q     Max 
-130.86  -61.83  -22.55   39.64  350.07 

Coefficients:
                  Estimate Std. Error t value Pr(>|t|)    
(Intercept)        163.051      5.714  28.535  < 2e-16 ***
reviews_per_month  -13.250      3.908  -3.391 0.000753 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 87.74 on 492 degrees of freedom
Multiple R-squared:  0.02284,	Adjusted R-squared:  0.02085 
F-statistic:  11.5 on 1 and 492 DF,  p-value: 0.0007526

> 
> p7 <- ggplot(data, aes(x = reviews_per_month, y = price)) +
+   geom_point(alpha = 0.5, color = "blue") +
+   geom_smooth(method = "lm", color = "red", linetype = "dashed") +
+   labs(title = "Price vs. Reviews Per Month",
+        x = "Reviews Per Month",
+        y = "Price")
> p7
`geom_smooth()` using formula = 'y ~ x'
> ggsave("price_vs_reviews_per_month.png", plot = p7, width = 8, height = 6)
`geom_smooth()` using formula = 'y ~ x'
> 
> # Residual Analysis for Reviews Per Month
> p8 <- ggplot(data, aes(x = predict(model_reviews_per_month), y = resid(model_reviews_per_month))) +
+   geom_point(alpha = 0.5, color = "blue") +
+   geom_hline(yintercept = 0, color = "red", linetype = "dashed") +
+   labs(title = "Residuals vs Fitted (Reviews Per Month)",
+        x = "Fitted Values",
+        y = "Residuals")
> p8
> ggsave("residuals_reviews_per_month.png", plot = p8, width = 8, height = 6)
> # Load necessary libraries
> library(ggplot2)
> library(dplyr)
> library(readxl)
> 
> # Load the cleaned data
> data <- read.csv("filtered_data2.csv")
Error in file(file, "rt") : cannot open the connection
In addition: Warning message:
In file(file, "rt") :
  cannot open file 'filtered_data2.csv': No such file or directory
> # Load necessary libraries
> library(ggplot2)
> library(dplyr)
> library(readxl)
> 
> # Load the cleaned data
> data <- read.csv("Scripts/filtered_data2.csv")
> 
> # Descriptive Statistics
> summary(data)
       id         neighbourhood       room_type             price    
 Min.   :  2595   Length:494         Length:494         Min.   : 20  
 1st Qu.: 68799   Class :character   Class :character   1st Qu.: 89  
 Median :218323   Mode  :character   Mode  :character   Median :125  
 Mean   :232586                                         Mean   :149  
 3rd Qu.:358510                                         3rd Qu.:190  
 Max.   :577324                                         Max.   :500  
 number_of_reviews reviews_per_month calculated_host_listings_count availability_365
 Min.   :  1.00    Min.   :0.010     Min.   : 1.000                 Min.   :  1.0   
 1st Qu.: 25.00    1st Qu.:0.310     1st Qu.: 1.000                 1st Qu.: 85.0   
 Median : 63.00    Median :0.720     Median : 1.000                 Median :227.5   
 Mean   : 95.25    Mean   :1.057     Mean   : 2.255                 Mean   :202.1   
 3rd Qu.:136.00    3rd Qu.:1.498     3rd Qu.: 2.000                 3rd Qu.:301.8   
 Max.   :467.00    Max.   :7.140     Max.   :28.000                 Max.   :365.0   
   row_number   
 Min.   : 14.0  
 1st Qu.:262.5  
 Median :506.5  
 Mean   :503.1  
 3rd Qu.:744.8  
 Max.   :998.0  
> 
> # Histogram of Prices
> p2 <- ggplot(data, aes(x = price)) +
+   geom_histogram(bins = 30, fill = "blue", color = "black") +
+   labs(title = "Histogram of Prices",
+        x = "Price",
+        y = "Count")
> p2
> ggsave("histogram_of_prices.png", plot = p2, width = 8, height = 6)
> 
> # ---- Function for Confidence Intervals and Hypothesis Testing ----
> display_conf_intervals <- function(model, model_name) {
+   cat("Confidence Intervals for", model_name, "Model:\n")
+   print(confint(model))
+   cat("\n")
+ }
> 
> perform_hypothesis_testing <- function(model, predictors) {
+   for (predictor in predictors) {
+     p_value <- summary(model)$coefficients[predictor, 4]
+     cat("P-value for", predictor, ": ", p_value, "\n")
+     if (p_value < 0.05) {
+       cat(predictor, "has a significant effect on Price (reject H0).\n")
+     } else {
+       cat(predictor, "does not have a significant effect on Price (fail to reject H0).\n")
+     }
+     cat("\n")
+   }
+ }
> 
> # ---- Regression Models, Visualizations, Residual Analysis, and Hypothesis Testing ----
> 
> # Boxplots for Price by Room Type
> # ---- Regression Model for Price by Room Type ----
> model_room_type <- lm(price ~ room_type, data = data)
> summary(model_room_type)

Call:
lm(formula = price ~ room_type, data = data)

Residuals:
    Min      1Q  Median      3Q     Max 
-138.40  -42.95  -12.95   27.05  311.61 

Coefficients:
                      Estimate Std. Error t value Pr(>|t|)    
(Intercept)            188.395      4.409  42.730   <2e-16 ***
room_typePrivate room  -95.445      6.898 -13.837   <2e-16 ***
room_typeShared room  -127.895     53.364  -2.397   0.0169 *  
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 75.21 on 491 degrees of freedom
Multiple R-squared:  0.2835,	Adjusted R-squared:  0.2805 
F-statistic: 97.12 on 2 and 491 DF,  p-value: < 2.2e-16

> 
> p1 <- ggplot(data, aes(x = room_type, y = price)) +
+   geom_boxplot(fill = "blue", color = "black") +
+   labs(title = "Price by Room Type",
+        x = "Room Type",
+        y = "Price")
> p1
> ggsave("boxplot_price_by_room_type.png", plot = p1, width = 8, height = 6)
> 
> # 1. Price vs Availability (availability_365)
> model_availability <- lm(price ~ availability_365, data = data)
> summary(model_availability)

Call:
lm(formula = price ~ availability_365, data = data)

Residuals:
    Min      1Q  Median      3Q     Max 
-128.62  -61.61  -22.15   41.90  353.86 

Coefficients:
                  Estimate Std. Error t value Pr(>|t|)    
(Intercept)      152.63957    8.00161  19.076   <2e-16 ***
availability_365  -0.01780    0.03431  -0.519    0.604    
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 88.74 on 492 degrees of freedom
Multiple R-squared:  0.0005466,	Adjusted R-squared:  -0.001485 
F-statistic: 0.2691 on 1 and 492 DF,  p-value: 0.6042

> 
> p3 <- ggplot(data, aes(x = availability_365, y = price)) +
+   geom_point(alpha = 0.5, color = "blue") +
+   geom_smooth(method = "lm", color = "red", linetype = "dashed") +
+   labs(title = "Price vs. Availability (availability_365)",
+        x = "Availability (days per year)",
+        y = "Price")
> p3
`geom_smooth()` using formula = 'y ~ x'
> ggsave("price_vs_availability.png", plot = p3, width = 8, height = 6)
`geom_smooth()` using formula = 'y ~ x'
> 
> # Residual Analysis for Availability
> p4 <- ggplot(data, aes(x = predict(model_availability), y = resid(model_availability))) +
+   geom_point(alpha = 0.5, color = "blue") +
+   geom_hline(yintercept = 0, color = "red", linetype = "dashed") +
+   labs(title = "Residuals vs Fitted (Availability)",
+        x = "Fitted Values",
+        y = "Residuals")
> p4
> ggsave("residuals_availability.png", plot = p4, width = 8, height = 6)
> 
> # Confidence Intervals and Hypothesis Testing
> display_conf_intervals(model_availability, "Availability")
Confidence Intervals for Availability Model:
                       2.5 %       97.5 %
(Intercept)      136.9180177 168.36111260
availability_365  -0.0851985   0.04960834

> perform_hypothesis_testing(model_availability, c("availability_365"))
P-value for availability_365 :  0.604187 
availability_365 does not have a significant effect on Price (fail to reject H0).

> 
> # 2. Price vs Number of Reviews
> model_reviews <- lm(price ~ number_of_reviews, data = data)
> summary(model_reviews)

Call:
lm(formula = price ~ number_of_reviews, data = data)

Residuals:
    Min      1Q  Median      3Q     Max 
-131.26  -61.85  -22.80   39.94  350.78 

Coefficients:
                   Estimate Std. Error t value Pr(>|t|)    
(Intercept)       162.86749    5.67616   28.69  < 2e-16 ***
number_of_reviews  -0.14515    0.04282   -3.39 0.000756 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 87.74 on 492 degrees of freedom
Multiple R-squared:  0.02282,	Adjusted R-squared:  0.02083 
F-statistic: 11.49 on 1 and 492 DF,  p-value: 0.000756

> 
> p5 <- ggplot(data, aes(x = number_of_reviews, y = price)) +
+   geom_point(alpha = 0.5, color = "blue") +
+   geom_smooth(method = "lm", color = "red", linetype = "dashed") +
+   labs(title = "Price vs. Number of Reviews",
+        x = "Number of Reviews",
+        y = "Price")
> p5
`geom_smooth()` using formula = 'y ~ x'
> ggsave("price_vs_number_of_reviews.png", plot = p5, width = 8, height = 6)
`geom_smooth()` using formula = 'y ~ x'
> 
> # Residual Analysis for Number of Reviews
> p6 <- ggplot(data, aes(x = predict(model_reviews), y = resid(model_reviews))) +
+   geom_point(alpha = 0.5, color = "blue") +
+   geom_hline(yintercept = 0, color = "red", linetype = "dashed") +
+   labs(title = "Residuals vs Fitted (Number of Reviews)",
+        x = "Fitted Values",
+        y = "Residuals")
> p6
> ggsave("residuals_number_of_reviews.png", plot = p6, width = 8, height = 6)
> 
> # 3. Price vs Reviews Per Month
> model_reviews_per_month <- lm(price ~ reviews_per_month, data = data)
> summary(model_reviews_per_month)

Call:
lm(formula = price ~ reviews_per_month, data = data)

Residuals:
    Min      1Q  Median      3Q     Max 
-130.86  -61.83  -22.55   39.64  350.07 

Coefficients:
                  Estimate Std. Error t value Pr(>|t|)    
(Intercept)        163.051      5.714  28.535  < 2e-16 ***
reviews_per_month  -13.250      3.908  -3.391 0.000753 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 87.74 on 492 degrees of freedom
Multiple R-squared:  0.02284,	Adjusted R-squared:  0.02085 
F-statistic:  11.5 on 1 and 492 DF,  p-value: 0.0007526

> 
> p7 <- ggplot(data, aes(x = reviews_per_month, y = price)) +
+   geom_point(alpha = 0.5, color = "blue") +
+   geom_smooth(method = "lm", color = "red", linetype = "dashed") +
+   labs(title = "Price vs. Reviews Per Month",
+        x = "Reviews Per Month",
+        y = "Price")
> p7
`geom_smooth()` using formula = 'y ~ x'
> ggsave("price_vs_reviews_per_month.png", plot = p7, width = 8, height = 6)
`geom_smooth()` using formula = 'y ~ x'
> 
> # Residual Analysis for Reviews Per Month
> p8 <- ggplot(data, aes(x = predict(model_reviews_per_month), y = resid(model_reviews_per_month))) +
+   geom_point(alpha = 0.5, color = "blue") +
+   geom_hline(yintercept = 0, color = "red", linetype = "dashed") +
+   labs(title = "Residuals vs Fitted (Reviews Per Month)",
+        x = "Fitted Values",
+        y = "Residuals")
> p8
> ggsave("residuals_reviews_per_month.png", plot = p8, width = 8, height = 6)